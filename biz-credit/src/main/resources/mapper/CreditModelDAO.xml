<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.biz.credit.dao.CreditModelDAO">
    <resultMap id="creditModel_list" type="com.biz.credit.vo.IndustryInfoVO">
        <result column="industry_id" property="industryId" />
        <result column="industry_code" property="industryCode" />
        <result column="industry_name" property="industryName" />
        <result column="model_code" property="modelCode"/>
        <result column="model_version" property="modelVersion"/>
        <result column="api_prod_code" property="apiProdCode"/>
        <result column="api_version" property="apiVersion"/>
    </resultMap>
    <select id="queryCreditModelList" parameterType="string"  resultMap="creditModel_list">
        SELECT t1.industry_id,t1.industry_code,t1.industry_name,t1.model_code,t1.model_version,GROUP_CONCAT(b.api_prod_code)as api_prod_code ,b.api_version
        from industry_info t1
                 INNER join industry_info_param a on t1.industry_id=a.industry_info_id
                 left join industry_api b on a.industry_api_id=b.id and b.status = 1
        WHERE t1.industry_id !=2
        GROUP BY t1.industry_id,t1.industry_code,t1.industry_name,t1.model_code,t1.model_version,b.api_version
    </select>
    <select id="queryApiList" parameterType="string"  resultType="java.lang.String">
        select prod_code as api_prod_code   FROM t_project_api WHERE api_code = #{apiCode}AND status = 1
    </select>
    <resultMap id="api_list" type="com.biz.credit.vo.ApiVO">
        <result column="api_prod_code" property="apiProdCode"/>
        <result column="api_version" property="apiVersion"/>
    </resultMap>
    <select id="queryIndustryInfoApiList" parameterType="int"  resultMap="api_list">
        select  t.api_prod_code,t.api_version
        from industry_info_param t1
        inner join industry_api t on t1.industry_api_id=t.id and t.status = 1
        where t1.industry_info_id=#{industryId}
        GROUP BY t.api_prod_code
    </select>
    <resultMap id="nodeParam_list" type="com.biz.credit.domain.DNodeParam">
        <result column="param_cfg_code" property="code"/>
        <result column="GROUP_CONCAT(t.param_code)" property="fields"/>
        <result column="param_name" property="name"/>
        <result column="MAX(t.required)" property="required"/>
    </resultMap>
    <select id="queryIndustryInfoApi" parameterType="int"  resultMap="nodeParam_list">
		SELECT t.param_cfg_code, t.param_name, GROUP_CONCAT(t.param_code), MAX(t.required) FROM (
	    SELECT DISTINCT n.param_code, c.param_cfg_code, d.param_name, d.param_type, d.param_order, n.required FROM (
        select  t.api_prod_code,t.api_version
        from industry_info_param t1
        inner join industry_api t on t1.industry_api_id=t.id and t.status = 1
        where t1.industry_info_id=#{industryId}
        GROUP BY t.api_prod_code,t.api_version) m
        INNER JOIN (SELECT a.prod_code, a.version, b.param_code, b.param_name, b.required FROM api_admin.api a
        INNER JOIN api_admin.api_request b ON a.id = b.api_id and b.status=1) n ON m.api_prod_code = n.prod_code AND m.api_version = n.version
        INNER JOIN api_admin.api_request_map c ON n.param_code = c.param_code
        INNER JOIN api_admin.api_param_cfg d ON c.param_cfg_code = d.param_code and d.status=1) t
        GROUP BY param_cfg_code, param_name, param_type, param_order ORDER BY param_type, param_order;

    </select>
</mapper>