<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.biz.warning.dao.StrategyDAO">
    <resultMap id="strategy_map"  type="com.biz.warning.vo.StrategyVO">
        <result property="strategyId" column="strategy_id" />
        <result property="strategyCode" column="strategy_code" />
        <result property="businessCode" column="business_code" />
        <result property="strategyName" column="strategy_name" />
        <result property="strategyStatus" column="strategy_status" />
        <result property="taskDescription" column="task_description" />
        <result property="calcLogic" column="calc_logic" />
        <result property="userId" column="user_id" />
        <result property="apiCode" column="api_code" />
        <result property="sourceStrategyId" column="source_strategy_id" />
        <result property="isTemplate" column="is_template" />
        <result property="description" column="description" />
        <result property="lastUpdateTime" column="last_update_time" />
        <result property="createTime" column="create_time" />
        <result property="execInterval" column="exec_interval" />
    </resultMap>

    <resultMap id="ruleSet_map" type="com.biz.warning.vo.RuleSetVO">
        <result property="ruleSetId" column="rule_set_id" />
        <result property="ruleSetName" column="rule_set_name" />
        <result property="ruleSetCode" column="rule_set_code" />
        <result property="ruleSetCode" column="rule_set_code" />
        <result property="calcLogic" column="calc_logic" />
        <result property="userId" column="user_id" />
        <result property="apiCode" column="api_code" />
        <result property="srcRuleSetId" column="src_rule_set_id" />
        <result property="isTemplate" column="is_template" />
        <result property="apiProdCode" column="api_prod_code" />
        <result property="apiVersion" column="api_version" />
        <result property="description" column="description" />
        <result property="lastUpdateTime" column="last_update_time" />
        <result property="createTime" column="create_time" />
        <result property="priority" column="priority" />
    </resultMap>

    <insert id="addStrategy"  useGeneratedKeys="true" keyProperty="strategy.strategyId"  parameterType="com.biz.warning.vo.StrategyVO">
        INSERT INTO risk_warning.t_strategy
        (strategy_code,
        business_code,
        strategy_name,
        strategy_status,
        task_description,
        calc_logic,
        user_id,
        api_code,
        source_strategy_id,
        is_template,
        description,
        last_update_time,
        create_time,
        exec_interval)
        VALUES
        (#{strategy.strategyCode},
        #{strategy.businessCode},
        #{strategy.strategyName},
        #{strategy.strategyStatus},
        #{strategy.taskDescription},
        #{strategy.calcLogic},
        #{strategy.userId},
        #{strategy.apiCode},
        #{strategy.sourceStrategyId},
        #{strategy.isTemplate},
        #{strategy.description},
        now(),
        now(),
        #{strategy.execInterval})
    </insert>

    <insert id="relateRuleSet"  useGeneratedKeys="true" keyProperty="strategyRuleSet.strategyRuleSetId"  parameterType="com.biz.warning.domain.StrategyRuleSet">
        INSERT INTO risk_warning.t_strategy_rule_set
        (strategy_id,
        rule_set_id,
        description,
        last_update_time,
        create_time)
        VALUES
        (#{strategyRuleSet.strategyId},
        #{strategyRuleSet.ruleSetId},
        #{strategyRuleSet.description},
        now(),
        now())
    </insert>

    <insert id="relateRuleSetList"  useGeneratedKeys="true" keyProperty="strategyRuleSet.strategyRuleSetId"  parameterType="java.util.List">
        INSERT INTO risk_warning.t_strategy_rule_set
        (strategy_id,
        rule_set_id,
        description,
        last_update_time,
        create_time)
        VALUES
        <foreach collection ="list" item="strategyRuleSet" index="index" separator=",">
        (#{strategyRuleSet.strategyId},
        #{strategyRuleSet.ruleSetId},
        #{strategyRuleSet.description},
        now(),
        now())
        </foreach>
    </insert>


    <update id="updateStrategy" parameterType="com.biz.warning.vo.StrategyVO">
        update risk_warning.t_strategy
        set
        <if test="null != strategy.businessCode">
            business_code = #{strategy.businessCode},
        </if>
        <if test="null != strategy.strategyName">
            strategy_name = #{strategy.strategyName},
        </if>
        <if test="null != strategy.taskDescription">
            task_description = #{strategy.taskDescription},
        </if>
        <if test="null != strategy.calcLogic">
            calc_logic = #{strategy.calcLogic},
        </if>
        <if test="null != strategy.description">
            description = #{strategy.description},
        </if>
        <if test="null != strategy.description">
            source_strategy_id = #{strategy.sourceStrategyId},
        </if>
        last_update_time = now()
        where strategy_id = #{strategy.strategyId}
    </update>

    <update id="updateStrategyState" parameterType="com.biz.warning.vo.StrategyVO">
        update risk_warning.t_strategy
        set
        strategy_status = #{strategyStatus},
        last_update_time = now()
        where strategy_id = #{strategyId}
    </update>
    <update id="updateStrategyForCopyStrategy" parameterType="com.biz.warning.vo.StrategyVO">
        update risk_warning.t_strategy
        set
        source_strategy_id=strategy_id,
        last_update_time=now()
        where api_code=#{strategy.apiCode} and is_template=1 and user_id=#{strategy.userId}
    </update>

    <update id="updateStrategyTemplateState">
        update t_strategy
        set
        is_template = #{strategyTemplateState},
        last_update_time = now()
        where strategy_id = #{strategyId}
    </update>

    <delete id="deleteRuleSetByStrategy" parameterType="com.biz.warning.vo.StrategyVO" >
        DELETE FROM t_strategy_rule_set
        WHERE
        strategy_id = #{strategy.strategyId}
    </delete>
    <delete id="deleteRelateRuleSet"  parameterType="com.biz.warning.domain.StrategyRuleSet">
        delete from risk_warning.t_strategy_rule_set where strategy_id=#{strategyRuleSet.strategyId} and rule_set_id=#{strategyRuleSet.ruleSetId};
    </delete>
    <delete id="deleteStrategy">
        delete from risk_warning.t_strategy where strategy_id=#{strategyId}
    </delete>

    <select id="findStrategy" resultMap="strategy_map" parameterType="com.biz.warning.vo.StrategyVO">
        select
        t.strategy_id,
        t.strategy_code,
        t.business_code,
        t.strategy_name,
        t.strategy_status,
        t.task_description,
        t.calc_logic,
        t.user_id,
        t.api_code,
        t.source_strategy_id,
        t.is_template,
        t.description,
        date_format(t.last_update_time,'%Y-%m-%d %T') last_update_time,
        date_format(t.create_time,'%Y-%m-%d %T') create_time,
        t.exec_interval
        from risk_warning.t_strategy t
        WHERE
        t.strategy_id = #{strategyId}
        <if test="null != userId">
            and t.user_id = #{userId}
        </if>
        <if test="null != apiCode">
            and t.api_code = #{apiCode}
        </if>
    </select>

    <select id="findRuleSetByStrategy" resultMap="ruleSet_map" parameterType="com.biz.warning.vo.StrategyVO">
        select
        t2.rule_set_id,t2.rule_set_code, t2.rule_set_name, t2.calc_logic, t2.user_id,t2.api_code, t2.src_rule_set_id, t2.is_template,
        t2.api_prod_code,t2.api_version,t2.description, date_format(t2.last_update_time,'%Y-%m-%d %T') last_update_time,
        date_format(t2.create_time,'%Y-%m-%d %T') create_time,t2.priority,t2.origin
        from risk_warning.t_strategy_rule_set t1
        inner join risk_warning.t_rule_set t2 on t1.rule_set_id = t2.rule_set_id
        WHERE
        t1.strategy_id = #{strategy.strategyId}
    </select>

    <select id="findAllStrategy" resultMap="strategy_map" parameterType="com.biz.warning.vo.StrategyVO">
        select
        t.strategy_id,
        t.strategy_code,
        t.strategy_name,
        t.description
        from t_strategy t
        WHERE t.strategy_status != 2
        and t.api_code = #{strategy.apiCode}
        <if test="null != strategy.isTemplate">
            AND t.is_template = #{strategy.isTemplate}
        </if>
        <if test="null != strategy.userId">
            and t.user_id = #{strategy.userId}
        </if>
        order by t.last_update_time desc
    </select>

    <select id="findAllStrategyNotTask" resultMap="strategy_map" parameterType="com.biz.warning.vo.StrategyVO">
        select  s.strategy_id,
        s.strategy_code,
        s.strategy_name,
        s.description
        from t_strategy s left join t_task t
        on s.strategy_id = t.strategy_id
        where t.task_id is null
        and s.strategy_status != 2
        and s.api_code = #{strategy.apiCode}
        <if test="null != strategy.isTemplate">
            AND s.is_template = #{strategy.isTemplate}
        </if>
        <if test="null != strategy.userId">
            and s.user_id = #{strategy.userId}
        </if>
        order by s.last_update_time desc
    </select>

    <select id="findStrategyByParam" resultMap="strategy_map">
        select
        s.strategy_id,
        s.strategy_code,
        s.strategy_name,
        s.description,
        rs.rule_set_id,rs.rule_set_code, rs.rule_set_name, rs.calc_logic, rs.user_id,rs.api_code, rs.src_rule_set_id, rs.is_template,
        rs.api_prod_code,rs.api_version, date_format(rs.last_update_time,'%Y-%m-%d %T') last_update_time,
        date_format(rs.create_time,'%Y-%m-%d %T') create_time
        from t_strategy s left join t_strategy_rule_set srs on s.strategy_id=srs.strategy_id
        left join t_rule_set rs on rs.rule_set_id=srs.rule_set_id
        WHERE
        s.api_code = #{strategy.apiCode}
        <if test="null != param and '' != param">
            AND (s.strategy_name like  CONCAT('%',#{param},'%') or s.strategy_code = #{param} or
            rs.rule_set_name like CONCAT('%',#{param},'%') )
        </if>
        <if test="null != strategy.strategyCode">
            AND s.stragegy_code = #{strategy.strategyCode}
        </if>

        <if test="null != strategy.isTemplate">
            AND s.is_template = #{strategy.isTemplate}
        </if>
        <if test="null != strategy.isTemplate">
            AND s.is_template = #{strategy.isTemplate}
        </if>
        <if test="null != strategy.userId">
            and s.user_id = #{strategy.userId}
        </if>
        group by s.strategy_id
        order by s.last_update_time desc
    </select>


    <select id="findTaskBySrcStrategy" resultType="com.biz.warning.vo.TaskVO" parameterType="com.biz.warning.vo.StrategyVO">
        select * from t_task t inner join t_strategy s on s.strategy_id = t.strategy_id
        where s.source_strategy_id=#{strategy.strategyId} and t.api_code=#{strategy.apiCode}
    </select>
</mapper>